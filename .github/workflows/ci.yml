name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Tests unitaires et linting
  test:
    name: Tests et Qualité Code
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: test_entreprise_db
        ports:
          - 5434:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: |
          cd frontend && pnpm run lint
          cd ../backend && pnpm run lint

      - name: Run Prettier check
        run: |
          cd frontend && pnpm run format:check
          cd ../backend && pnpm run format:check

      - name: Run backend tests
        run: npm run test:backend
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5434/test_entreprise_db
          JWT_SECRET: test-jwt-secret

      - name: Run frontend tests
        run: npm run test:frontend

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  # Job 2: Tests E2E
  e2e:
    name: Tests End-to-End
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: devuser
          POSTGRES_PASSWORD: devpassword
          POSTGRES_DB: entreprise_db
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Setup database
        run: |
          cd backend
          pnpm exec prisma migrate deploy
          pnpm exec prisma db seed
        env:
          DATABASE_URL: postgresql://devuser:devpassword@localhost:5433/entreprise_db

      - name: Build applications
        run: |
          cd backend && pnpm run build
          cd ../frontend && pnpm run build

      - name: Start backend
        run: |
          cd backend && pnpm run start:prod &
          sleep 10
        env:
          DATABASE_URL: postgresql://devuser:devpassword@localhost:5433/entreprise_db
          JWT_SECRET: test-jwt-secret

      - name: Start frontend
        run: |
          cd frontend && pnpm run preview &
          sleep 5

      - name: Run Playwright tests
        run: npm run test:e2e

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Job 3: Build et Security Scan
  build-and-scan:
    name: Build et Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: |
          cd backend && pnpm run build
          cd ../frontend && pnpm run build

      - name: Run security audit
        run: |
          cd backend && pnpm audit --prod
          cd ../frontend && pnpm audit --prod

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker build --target backend -t entreprise-organiser-backend .
          docker build --target frontend -t entreprise-organiser-frontend .

      - name: Run Trivy vulnerability scanner - Backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'entreprise-organiser-backend'
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Run Trivy vulnerability scanner - Frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'entreprise-organiser-frontend'
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'backend-trivy-results.sarif'

  # Job 4: Deploy (seulement sur main)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, e2e, build-and-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://entreprise-organiser.yourdomain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          # Backend
          docker build --target backend \
            --tag ${{ secrets.DOCKER_USERNAME }}/entreprise-organiser-backend:${{ github.sha }} \
            --tag ${{ secrets.DOCKER_USERNAME }}/entreprise-organiser-backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/entreprise-organiser-backend:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/entreprise-organiser-backend:latest

          # Frontend
          docker build --target frontend \
            --tag ${{ secrets.DOCKER_USERNAME }}/entreprise-organiser-frontend:${{ github.sha }} \
            --tag ${{ secrets.DOCKER_USERNAME }}/entreprise-organiser-frontend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/entreprise-organiser-frontend:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/entreprise-organiser-frontend:latest

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/entreprise-organiser
            docker compose pull
            docker compose up -d
            docker system prune -f

  # Job 5: Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Déploiement Entreprise Organiser: ${{ job.status }}
            Commit: ${{ github.sha }}
            Auteur: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always() 