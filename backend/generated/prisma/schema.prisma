// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enumération pour le statut des affaires
enum StatutAffaire {
  PLANIFIEE
  EN_COURS
  TERMINEE
  CLOTUREE
}

// Enumération pour les types d'heures
enum TypeHeure {
  FAB
  SER
  POSE
}

// Modèle Affaire (chantier)
model Affaire {
  id                String        @id @default(uuid())
  numero            String        @unique // format: "24-BOIS-003"
  libelle           String
  client            String
  adresse           String?
  dateCreation      DateTime      @default(now())
  dateCloturePrevue DateTime?
  objectifCaHt      Float
  objectifAchatHt   Float
  objectifHeuresFab Float
  ser               Float         @default(0)
  pose              Float         @default(0)
  statut            StatutAffaire @default(PLANIFIEE)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  bdc       Bdc[]
  pointages Pointage[]

  @@map("affaires")
}

// Modèle Catégorie d'achat
model CategorieAchat {
  id            String @id @default(uuid())
  code          String @unique // Ex: BOI, ACI, VIR, QUI
  intitule      String
  pourcentageFg Float

  // Relations
  bdc Bdc[]

  @@map("categories_achat")
}

// Modèle Bon de commande
model Bdc {
  id            String    @id @default(uuid())
  numero        String    @unique
  montantHt     Float
  dateBdc       DateTime  @default(now())
  dateReception DateTime?
  commentaire   String?

  // Relations
  affaireId   String
  affaire     Affaire        @relation(fields: [affaireId], references: [id])
  categorieId String
  categorie   CategorieAchat @relation(fields: [categorieId], references: [id])
  fournisseur String

  // Champs calculés
  montantFg Float @default(0) // Montant des frais généraux

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bdc")
}

// Modèle Pointage
model Pointage {
  id           String    @id @default(uuid())
  datePointage DateTime
  nbHeures     Float
  commentaire  String?
  typeHeure    TypeHeure

  // Relations
  affaireId String
  affaire   Affaire @relation(fields: [affaireId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pointages")
}

// Modèle Paramètre global
model ParametreGlobal {
  id          String  @id @default(uuid())
  cle         String  @unique
  valeur      String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("parametres_globaux")
}

// Enumération pour les rôles utilisateurs
enum RoleEnum {
  ADMIN_SYS // accès total, gestion des paramètres
  CHARGE_AFFAIRE // crée/édite les affaires, valide les BDC, consulte reporting
  ACHETEUR // crée/édite BDC, voit les coûts, pas la marge
  CHEF_ATELIER // saisit/valide les pointages
  CONSULTATION // lecture seule reporting
}

// Modèle Utilisateur
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  nom          String
  prenom       String
  passwordHash String
  role         RoleEnum
  actif        Boolean  @default(true)

  // Champs RGPD
  supprime   Boolean   @default(false)
  supprimeLe DateTime?

  // Relations
  pointages       Pointage[]
  mouvementsStock MouvementStock[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Modèle Article d'inventaire
model Article {
  id           String  @id @default(uuid())
  code         String  @unique
  designation  String
  unite        String // Ex: "m", "kg", "pièce", "m²"
  prixUnitaire Float
  stockActuel  Float   @default(0)
  stockMinimum Float   @default(0)
  stockMaximum Float?
  emplacement  String?
  fournisseur  String?
  actif        Boolean @default(true)

  // Relations
  mouvements MouvementStock[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("articles")
}

// Enumération pour les types de mouvement de stock
enum TypeMouvement {
  ENTREE
  SORTIE
  AJUSTEMENT
  INVENTAIRE
}

// Modèle Mouvement de stock
model MouvementStock {
  id           String        @id @default(uuid())
  type         TypeMouvement
  quantite     Float
  prixUnitaire Float?
  motif        String?
  reference    String? // Référence du document (BDC, etc.)

  // Relations
  articleId String
  article   Article @relation(fields: [articleId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mouvements_stock")
}

// Vues materialisées (à implémenter via des migrations SQL brutes)
// Les vues suivantes seront créées:
// - v_resultat_affaire : calcule marge-objectif/réalisé, FG
// - v_resultat_global : agrégation inter-affaires
